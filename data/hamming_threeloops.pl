#maxint=1000.

% sail hamming numbers

% { 2^k | k = 0,1,2,... } 
% h2(startNode,2,endNode)

h2(1,'2',2).
h2(X,'2',Y) :- h2(_,'2',X), Y is 2 * X.


% { 2^j * 3^k | j,k = 0,1,2,... } start from nodes generated by h2
% h23(startNode,3,endNode)

h23(1,'3',3).
h23(X,'3',Y)  :- h2(_,'2',X), Y is 3 * X.
h23(X,'3',Y)  :- h23(_,'3',X), Y is 3 * X.


% { 2^i * 3^j * 5^k | i,j,k = 0,1,2,... } start from nodes generated by h2 and h23
% h235(startNode,5,endNode)

h235(1,'5',5).
h235(X,'5',Y) :- h2(_,'2',X), Y is 5 * X.
h235(X,'5',Y) :- h23(_,'3',X), Y is 5 * X.
h235(X,'5',Y) :- h235(_,'5',X), Y is 5 * X.


% Output relation
% sail(startNode,label,endNode)

sail(X,L,Y) :- h2(X,L,Y).
sail(X,L,Y) :- h23(X,L,Y).
sail(X,L,Y) :- h235(X,L,Y).


% Count total numbers

%sail_edges(N) :- #count{X,L,Y : sail(X,L,Y)} = N.
%h2_edges(N) :- #count{X,L,Y : h2(X,L,Y)} = N.
%h23_edges(N) :- #count{X,L,Y : h23(X,L,Y)} = N.
%h235_edges(N) :- #count{X,L,Y : h235(X,L,Y)} = N.



% fish hamming numbers
% fish(startNode,label,endNode)

fish(1,'2',2).
fish(1,'3',3).
fish(1,'5',5).

fish(X,'2',Y) :- fish(_,_,X), Y is 2 * X.
fish(X,'3',Y) :- fish(_,_,X), Y is 3 * X.
fish(X,'5',Y) :- fish(_,_,X), Y is 5 * X.


% Count total numbers

%fish_edges(N) :- #count{X,L,Y : fish(X,L,Y)} = N.


label('2').
label('3').
label('5').


% This is the RPQ engine 
conc(L,M,L_conc_M):- label(L), label(M), concat_atom([L,M], '.', L_conc_M).

sail(X,L_conc_M,Y) :- conc(L,M, L_conc_M), sail(X,L,Z), sail(Z,M,Y).
fish(X,L_conc_M,Y) :- conc(L,M, L_conc_M), fish(X,L,Z), fish(Z,M,Y).


or_(L,M,L_or_M) :- label(L), label(M), concat_atom([L,M], '|', L_or_M).

sail(X,L_or_M,Y) :- or_(L,_, L_or_M), sail(X,L,Y).
sail(X,L_or_M,Y) :- or_(_,M, L_or_M), sail(X,M,Y).
fish(X,L_or_M,Y) :- or_(L,_, L_or_M), fish(X,L,Y).
fish(X,L_or_M,Y) :- or_(_,M, L_or_M), fish(X,M,Y).


plus(L, L_plus) :- label(L), concat_atom([L,''], '+', L_plus).

sail(X,L_plus,Y) :- plus(L, L_plus), sail(X,L,Y).
sail(X,L_plus,Y) :- plus(L, L_plus), sail(X,L,Z), sail(Z,L_plus,Y).
fish(X,L_plus,Y) :- plus(L, L_plus), fish(X,L,Y).
fish(X,L_plus,Y) :- plus(L, L_plus), fish(X,L,Z), fish(Z,L_plus,Y).


%sail(X,L_star,X) :- star(L, L_star), sail(X,L,X).
%sail(X,L_star,Y) :- star(L, L_star), sail(X,L,Z), sail(Z,L_star,Y).
